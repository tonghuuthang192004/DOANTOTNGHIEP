import 'dart:convert';
import 'package:http/http.dart' as http;

import '../../api/api_constants.dart';
import '../../models/product/product_model.dart';
import '../../models/user/user_token.dart';

class ProductService {
  // L·∫•y s·∫£n ph·∫©m theo danh m·ª•c
  static Future<List<ProductModel>> getProductsByCategory(
      int categoryId) async {
    try {
      final url = Uri.parse('${API.getProductByCategory}/$categoryId');
      final response = await http.get(url);

      if (response.statusCode == 200) {
        final Map<String, dynamic> resData = json.decode(response.body);
        final List data = resData['data'];
        return data.map((item) => ProductModel.fromJson(item)).toList();
      } else {
        print('API l·ªói v·ªõi status: ${response.statusCode}');
        print('N·ªôi dung l·ªói: ${response.body}');
        throw Exception('Kh√¥ng th·ªÉ t·∫£i s·∫£n ph·∫©m theo danh m·ª•c');
      }
    } catch (e) {
      print('L·ªói k·∫øt n·ªëi ho·∫∑c ph√¢n t√≠ch JSON: $e');
      throw Exception('L·ªói t·∫£i s·∫£n ph·∫©m theo danh m·ª•c');
    }
  }

  static Future<List<ProductModel>> getAllProducts() async {
    try {
      final url = Uri.parse(API.getAllProducts);
      final response = await http.get(url);

      if (response.statusCode == 200) {
        final Map<String, dynamic> resData = json.decode(response.body);
        final List data = resData['data']; // ‚úÖ ch√≠nh x√°c
        return data.map((item) => ProductModel.fromJson(item)).toList();
      } else {
        print('API l·ªói khi t·∫£i t·∫•t c·∫£ s·∫£n ph·∫©m: ${response.statusCode}');
        throw Exception('Kh√¥ng th·ªÉ t·∫£i t·∫•t c·∫£ s·∫£n ph·∫©m');
      }
    } catch (e) {
      print('L·ªói k·∫øt n·ªëi khi t·∫£i t·∫•t c·∫£ s·∫£n ph·∫©m: $e');
      throw Exception('L·ªói t·∫£i to√†n b·ªô s·∫£n ph·∫©m');
    }
  }


  static Future<List<ProductModel>> searchProducts(String keyword) async {
    try {
      final url = Uri.parse('${API.searchProducts}?q=$keyword');
      final response = await http.get(url);

      if (response.statusCode == 200) {
        final List data = json.decode(response.body);
        return data.map((item) => ProductModel.fromJson(item)).toList();
      } else {
        print('L·ªói khi t√¨m ki·∫øm s·∫£n ph·∫©m: ${response.statusCode}');
        return [];
      }
    } catch (e) {
      print('L·ªói k·∫øt n·ªëi t√¨m ki·∫øm: $e');
      return [];
    }
  }

  static Future<List<ProductModel>> getHotProducts() async {
    try {
      final url = Uri.parse(API.getHotProducts);
      final response = await http.get(url);

      if (response.statusCode == 200) {
        final Map<String, dynamic> resData = json.decode(response.body);
        final List data = resData['data']; // ‚úÖ L·∫•y t·ª´ key 'data'
        return data.map((item) => ProductModel.fromJson(item)).toList();
      } else {
        print('L·ªói khi l·∫•y s·∫£n ph·∫©m hot: ${response.statusCode}');
        return [];
      }
    } catch (e) {
      print('L·ªói k·∫øt n·ªëi khi l·∫•y s·∫£n ph·∫©m hot: $e');
      return [];
    }
  }

  static Future<ProductModel?> getProductById(int id) async {
    try {
      final url = Uri.parse('${API.getProductById}/$id');
      final response = await http.get(url);

      if (response.statusCode == 200) {
        final Map<String, dynamic> jsonBody = json.decode(response.body);
        if (jsonBody['success'] == true && jsonBody['data'] != null) {
          return ProductModel.fromJson(jsonBody['data']); // üëà s·ª≠a ·ªü ƒë√¢y
        } else {
          print('Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi ID: $id');
          return null;
        }
      } else {
        print('L·ªói khi l·∫•y chi ti·∫øt s·∫£n ph·∫©m: ${response.statusCode}');
        return null;
      }
    } catch (e) {
      print('L·ªói khi k·∫øt n·ªëi ho·∫∑c ph√¢n t√≠ch JSON chi ti·∫øt s·∫£n ph·∫©m: $e');
      return null;
    }
  }
  /// ‚úÖ G·ª≠i ƒë√°nh gi√° s·∫£n ph·∫©m
  static Future<bool> submitReview({
    required int productId,
    required int score,
    String? comment,
  }) async {
    final token = await UserToken.getToken();
    final url = Uri.parse('${API.baseUrl}/ratings'); // ho·∫∑c endpoint b·∫°n ƒë√£ ƒë·∫∑t

    final response = await http.post(
      url,
      headers: {
        'Authorization': 'Bearer $token',
        'Content-Type': 'application/json',
      },
      body: jsonEncode({
        'id_san_pham': productId,
        'diem_so': score,
        'nhan_xet': comment ?? '',
      }),
    );

    if (response.statusCode == 200) {
      return true;
    } else {
      print('‚ùå L·ªói khi g·ª≠i ƒë√°nh gi√°: ${response.body}');
      return false;
    }
  }
}
