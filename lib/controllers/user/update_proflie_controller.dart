import 'dart:convert';
import 'dart:io';
import 'package:http/http.dart' as http;

import '../../api/api_constants.dart';
import '../../models/user/user_token.dart';
import '../../models/user/user_model.dart';
import '../../services/user/user_session.dart';

class UpdateProfileController {
  /// ‚úÖ L·∫•y th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i
  Future<UserModel?> getCurrentUserProfile() async {
    final token = await UserToken.getToken();
    if (token == null) {
      print('‚ö†Ô∏è [getProfile] Token null, c·∫ßn ƒëƒÉng nh·∫≠p l·∫°i');
      return null;
    }

    try {
      final response = await http.get(
        Uri.parse(API.getProfile),
        headers: {'Authorization': 'Bearer $token'},
      );

      print('üì¶ [getProfile] Status: ${response.statusCode}');
      final data = jsonDecode(response.body);
      print('üì¶ [getProfile] Response: $data');

      if (response.statusCode == 200 && (data['success'] == true || data['status'] == true)) {
        final userJson = data['data'] ?? data['user'];
        if (userJson != null) {
          print('‚úÖ [getProfile] User found');
          return UserModel.fromJson(userJson);
        }
      } else {
        print('‚ùå [getProfile] L·ªói response: ${data['message']}');
      }
    } catch (e) {
      print('‚ùå [getProfile] Exception: $e');
    }
    return null;
  }

  /// ‚úèÔ∏è C·∫≠p nh·∫≠t t√™n v√† s·ªë ƒëi·ªán tho·∫°i
  Future<Map<String, dynamic>> updateProfileInfo({
    required String ten,
    required String soDienThoai,
  }) async {
    final token = await UserToken.getToken();
    if (token == null) {
      print('‚ö†Ô∏è [updateProfileInfo] Token null');
      return {'success': false, 'message': 'Kh√¥ng t√¨m th·∫•y token'};
    }

    try {
      final response = await http.post(
        Uri.parse(API.updateProfile),
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer $token',
        },
        body: jsonEncode({
          'ten': ten,
          'so_dien_thoai': soDienThoai,
        }),
      );

      print('üì¶ [updateProfileInfo] Status: ${response.statusCode}');
      final data = jsonDecode(response.body);
      print('üì¶ [updateProfileInfo] Response: $data');

      if (response.statusCode == 200 && data['success'] == true) {
        print("‚úÖ [updateProfileInfo] Update th√†nh c√¥ng: ${data['user']}");
        await UserSession.setUser(data['user']); // L∆∞u v√†o local
        return {'success': true, 'message': data['message']};
      }
      return {'success': false, 'message': data['message'] ?? 'C·∫≠p nh·∫≠t th·∫•t b·∫°i'};
    } catch (e) {
      print('‚ùå [updateProfileInfo] Exception: $e');
      return {'success': false, 'message': 'L·ªói c·∫≠p nh·∫≠t th√¥ng tin'};
    }
  }

  /// üñº Upload avatar m·ªõi
  Future<Map<String, dynamic>> uploadAvatar(File avatarFile) async {
    final token = await UserToken.getToken();
    if (token == null) {
      print('‚ö†Ô∏è [uploadAvatar] Token null');
      return {'success': false, 'message': 'Kh√¥ng t√¨m th·∫•y token'};
    }

    try {
      final request = http.MultipartRequest('POST', Uri.parse(API.updateAvatar))
        ..headers['Authorization'] = 'Bearer $token'
        ..files.add(await http.MultipartFile.fromPath('avatar', avatarFile.path));

      final streamedResponse = await request.send();
      final responseBody = await streamedResponse.stream.bytesToString();
      final data = jsonDecode(responseBody);

      print('üì¶ [uploadAvatar] Status: ${streamedResponse.statusCode}');
      print('üì¶ [uploadAvatar] Response: $data');

      if (streamedResponse.statusCode == 200 && data['success'] == true) {
        print("‚úÖ [uploadAvatar] Upload th√†nh c√¥ng: ${data['avatar_url']}");

        // C·∫≠p nh·∫≠t avatar m·ªõi v√†o local user
        final currentUser = await UserSession.getUser();
        if (currentUser != null) {
          currentUser['avatar'] = data['avatar_url'];
          await UserSession.setUser(currentUser);
        }

        return {'success': true, 'message': data['message']};
      }

      return {'success': false, 'message': data['message'] ?? 'Upload avatar th·∫•t b·∫°i'};
    } catch (e) {
      print('‚ùå [uploadAvatar] Exception: $e');
      return {'success': false, 'message': 'L·ªói upload avatar'};
    }
  }
}
