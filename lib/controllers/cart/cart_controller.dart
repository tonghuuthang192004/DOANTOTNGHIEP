import 'package:flutter/material.dart';
import '../../models/cart/cart_model.dart';
import '../../models/product/product_model.dart';
import '../../services/cart/cart_service.dart';

class CartController extends ChangeNotifier {
  List<CartModel> _cartItems = [];
  List<CartModel> get cartItems => _cartItems;

  bool isLoading = false;
  String? error;

  double get subtotal => _cartItems.fold(
      0, (sum, item) => sum + ((item.product.gia ?? 0) * item.quantity));

  double get deliveryFee => 5.99;
  double get tax => subtotal * 0.08;
  double get total => subtotal + deliveryFee + tax;

  /// üöö Load gi·ªè h√†ng t·ª´ backend
  Future<void> loadCart() async {
    isLoading = true;
    error = null;
    notifyListeners();

    try {
      _cartItems = await CartService.fetchCart();
    } catch (e) {
      error = "‚ùå Kh√¥ng th·ªÉ t·∫£i gi·ªè h√†ng: $e";
      _cartItems = [];
    } finally {
      isLoading = false;
      notifyListeners();
    }
  }

  /// üîÑ Refresh gi·ªè h√†ng trong b·ªô nh·ªõ (kh√¥ng g·ªçi API)
  void refreshCart(List<CartModel> updatedCart) {
    _cartItems = updatedCart;
    notifyListeners();
  }

  /// ‚ûï Th√™m s·∫£n ph·∫©m v√†o gi·ªè (t·ª± kh√¥i ph·ª•c n·∫øu soft-delete)
  Future<void> addProduct(ProductModel product, {int quantity = 1}) async {
    try {
      // Ki·ªÉm tra n·∫øu s·∫£n ph·∫©m ƒë√£ c√≥ trong gi·ªè
      final existingItem = _cartItems.firstWhere(
            (item) => item.product.id == product.id,
        orElse: () => CartModel(id: "", product: product, quantity: 0),
      );

      if (existingItem.id.isNotEmpty) {
        final newQuantity = existingItem.quantity + quantity;
        await CartService.updateQuantity(product.id.toString(), newQuantity);
      } else {
        try {
          await CartService.addToCart(product, quantity: quantity);
        } catch (e) {
          // N·∫øu l·ªói do soft-delete => kh√¥i ph·ª•c
          if (e.toString().contains('soft-delete')) {
            await restoreItem(product.id.toString(), quantity: quantity);
          } else {
            rethrow; // n√©m l·ªói l·∫°i n·∫øu kh√¥ng ph·∫£i soft-delete
          }
        }
      }

      await loadCart();
    } catch (e) {
      error = "‚ùå Kh√¥ng th·ªÉ th√™m s·∫£n ph·∫©m: $e";
      notifyListeners();
    }
  }

  /// ‚ôªÔ∏è Kh√¥i ph·ª•c 1 s·∫£n ph·∫©m ƒë√£ xo√° (soft-delete)
  Future<void> restoreItem(String productId, {int quantity = 1}) async {
    try {
      await CartService.restoreCartItem(productId, quantity: quantity);
      await loadCart();
    } catch (e) {
      error = "‚ùå Kh√¥ng th·ªÉ kh√¥i ph·ª•c s·∫£n ph·∫©m: $e";
      notifyListeners();
    }
  }

  /// üîÅ C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng
  Future<void> updateQuantity(String productId, int quantity) async {
    try {
      await CartService.updateQuantity(productId, quantity);
      await loadCart();
    } catch (e) {
      error = "‚ùå Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng: $e";
      notifyListeners();
    }
  }

  /// ‚ùå Xo√° 1 s·∫£n ph·∫©m (soft-delete)
  Future<void> removeItem(String productId) async {
    try {
      await CartService.removeCartItem(productId);
      await loadCart();
    } catch (e) {
      error = "‚ùå Kh√¥ng th·ªÉ xo√° s·∫£n ph·∫©m: $e";
      notifyListeners();
    }
  }

  /// üßπ Xo√° to√†n b·ªô gi·ªè h√†ng (soft-delete)
  Future<void> clearCart() async {
    try {
      await CartService.clearCart();
      _cartItems.clear();
      notifyListeners();
    } catch (e) {
      error = "‚ùå Kh√¥ng th·ªÉ xo√° to√†n b·ªô gi·ªè h√†ng: $e";
      notifyListeners();
    }
  }
}
