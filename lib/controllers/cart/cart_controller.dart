import 'package:flutter/material.dart';
import '../../models/cart/cart_model.dart';
import '../../models/product/product_model.dart';
import '../../services/cart/cart_service.dart';

class CartController extends ChangeNotifier {
  List<CartModel> _cartItems = [];
  List<CartModel> get cartItems => _cartItems;

  bool isLoading = false;
  String? error;

  double get subtotal => _cartItems.fold(
      0, (sum, item) => sum + item.product.gia * item.quantity);

  double get deliveryFee => 5.99;
  double get tax => subtotal * 0.08;
  double get total => subtotal + deliveryFee + tax;

  /// üöö Load gi·ªè h√†ng c·ªßa ng∆∞·ªùi d√πng (userId ƒë∆∞·ª£c l·∫•y t·ª´ session b√™n trong service)
  Future<void> loadCart() async {
    isLoading = true;
    error = null;
    notifyListeners();

    try {
      _cartItems = await CartService.fetchCart();
    } catch (e) {
      error = "Kh√¥ng th·ªÉ t·∫£i gi·ªè h√†ng: $e";
      _cartItems = [];
    } finally {
      isLoading = false;
      notifyListeners();
    }
  }

  /// ‚ûï Th√™m s·∫£n ph·∫©m v√†o gi·ªè
  Future<void> addProduct(ProductModel product) async {
    try {
      CartModel? existingItem;
      try {
        existingItem = _cartItems.firstWhere((item) => item.product.id == product.id);
      } catch (e) {
        existingItem = null;
      }

      if (existingItem != null) {
        final newQuantity = existingItem.quantity + 1;
        await CartService.updateQuantity(existingItem.id.toString(), newQuantity);
      } else {
        await CartService.addToCart(product);
      }

      await loadCart(); // Reload l·∫°i gi·ªè h√†ng
    } catch (e) {
      error = "Kh√¥ng th·ªÉ th√™m s·∫£n ph·∫©m: $e";
      notifyListeners();
    }
  }

  /// üîÅ C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m
  Future<void> updateQuantity(String itemId, int quantity) async {
    try {
      await CartService.updateQuantity(itemId, quantity);
      await loadCart();
    } catch (e) {
      error = "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng: $e";
      notifyListeners();
    }
  }

  /// ‚ùå Xo√° s·∫£n ph·∫©m kh·ªèi gi·ªè
  Future<void> removeItem(String itemId) async {
    try {
      await CartService.removeCartItem(itemId);
      await loadCart();
    } catch (e) {
      error = "Kh√¥ng th·ªÉ xo√° s·∫£n ph·∫©m: $e";
      notifyListeners();
    }
  }
}
